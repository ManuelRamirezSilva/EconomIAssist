import os  # Keep this import at the top
import sys
from openai import AzureOpenAI
from dotenv import load_dotenv
import pydantic
import json
import time
import structlog  # Add this import


class IntentResponse(pydantic.BaseModel):
    intent: str
    value: str

class MultiIntentResponse(pydantic.BaseModel):
    intents: list[IntentResponse]

class IntentParser:
    def __init__(self):
        # Carga variables de entorno desde .env
        load_dotenv(os.path.join(os.path.dirname(__file__), '../../.env'))
        # Leer credenciales Azure OpenAI desde .env
        self.endpoint = os.getenv("AZURE_OPENAI_API_BASE")
        self.api_key = os.getenv("AZURE_OPENAI_API_KEY")
        self.api_version = os.getenv("AZURE_OPENAI_API_VERSION")
        self.deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")
        # Verificar credenciales
        if not all([self.endpoint, self.api_key, self.api_version, self.deployment]):
            raise ValueError("Faltan credenciales de Azure OpenAI en el archivo .env")
        
        # Create the OpenAI client
        self.client = AzureOpenAI(
            azure_endpoint=self.endpoint,
            api_key=self.api_key,
            api_version=self.api_version
        )
        
        # Initialize intent logger
        try:
            from ..utils.intent_logger import IntentLogger
            self.intent_logger = IntentLogger(parser_id="main_intent_parser")
        except ImportError:
            # Remove the os import here since it's already imported at the top level
            sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
            from utils.intent_logger import IntentLogger
            self.intent_logger = IntentLogger(parser_id="main_intent_parser")
    
        # Set a reference to the logger for use throughout the class
        self.logger = self.intent_logger
    
        self.intent_logger.info("Intent parser instance created")
        
        # Log initialization
        azure_config = {
            "api_base": self.endpoint,
            "api_version": self.api_version,
            "deployment": self.deployment,
            "api_key": "[REDACTED]"  # Redacted for security
        }
        
        self.intent_logger.log_parser_initialization(
            success=True, 
            azure_config=azure_config
        )

        self.count_intents_prompt = (
            "Eres un experto en analizar mensajes de usuarios para EconomIAssist, un asistente financiero integral con capacidades MCP avanzadas. "
            "Tu trabajo es contar cu√°ntas intenciones distintas (acciones o solicitudes) est√°n presentes en el mensaje del usuario. "
            
            "EconomIAssist integra los siguientes servidores MCP con capacidades espec√≠ficas:\n"
            "üè¶ B√∫squeda Web Financiera: Datos econ√≥micos argentinos (d√≥lar, inflaci√≥n, tasas, MERVAL, an√°lisis)\n"
            "üåê Tavily Server: B√∫squeda web inteligente y noticias financieras\n"
            "üíæ Knowledge Base: Memoria conversacional y registros personales\n"
            "üßÆ Calculator: C√°lculos matem√°ticos y financieros precisos\n"
            "üìÖ Google Calendar: Gesti√≥n de agenda y eventos\n"
            "üìä Google Sheets: Hojas de c√°lculo y gesti√≥n documental\n"
            
            "Capacidades que pueden generar intenciones m√∫ltiples:\n"
            "- Consultas econ√≥micas combinadas (d√≥lar + inflaci√≥n + an√°lisis)\n"
            "- Gesti√≥n de registros financieros (anotar + calcular + programar)\n"
            "- An√°lisis e investigaci√≥n (buscar + analizar + recordar)\n"
            "- Planificaci√≥n financiera (calcular + agendar + documentar)\n"
            "- Seguimiento de inversiones y portfolio\n"
            "- Educaci√≥n y asesoramiento personalizado\n"
            
            "Reconoce jerga argentina: 'palos verdes' (millones USD), 'lucas' (miles pesos), 'blue/oficial/MEP/CCL' (d√≥lares)\n"
            
            "Cuenta cada solicitud o acci√≥n distinta que el usuario quiere realizar. "
            "Devuelve SOLO el n√∫mero como un entero. No incluyas ninguna explicaci√≥n o texto adicional.\n"
            
            "Ejemplos con capacidades MCP reales:\n"
            "Usuario: 'Cu√°nto est√° el blue y agendame recordatorio para revisar mis inversiones ma√±ana'\n"
            "Salida: 2\n"
            "Usuario: 'Dame la inflaci√≥n actual, calcula el impacto en mi presupuesto de 500 lucas y b√∫scame noticias al respecto'\n"
            "Salida: 3\n"
            "Usuario: 'Quiero un an√°lisis econ√≥mico completo con recomendaciones'\n"
            "Salida: 1\n"
            "Usuario: 'Anota que gast√© 200 mil en supermercado, calcula cu√°nto me queda del presupuesto mensual y comp√°rteme la planilla'\n"
            "Salida: 3\n"
            "Usuario: 'A cu√°nto est√° el d√≥lar oficial hoy?'\n"
            "Salida: 1\n"
            "Usuario: 'Busca noticias sobre las nuevas medidas del BCRA y programa una reuni√≥n para analizarlas'\n"
            "Salida: 2\n"
            "Usuario: 'No gast√© nada ayer, fue un error en mi registro'\n"
            "Salida: 1\n"
            "IMPORTANTE: Tu √öNICA tarea es contar el n√∫mero de intenciones. NO respondas a las consultas del usuario ni ofrezcas explicaciones. "
            "Devuelve SOLO el n√∫mero como un entero. No incluyas ninguna explicaci√≥n o texto adicional.\n"
        )

        self.system_prompt = (
            "Eres un experto analizador de intenciones para EconomIAssist, un asistente financiero integral especializado en el contexto econ√≥mico argentino.\n"
            
            "üè¶ SISTEMA MCP INTEGRADO - CAPACIDADES COMPLETAS:\n"
            
            "üìà 1. B√öSQUEDA WEB FINANCIERA (Datos Econ√≥micos Argentinos):\n"
            "Herramientas disponibles:\n"
            "   ‚Ä¢ get_dollar_rates: Cotizaciones USD (oficial, blue, MEP, CCL)\n"
            "   ‚Ä¢ get_inflation_data: Inflaci√≥n mensual, anual e interanual oficial\n"
            "   ‚Ä¢ get_interest_rates: Tasas BADLAR, LELIQ, Plazo Fijo\n"
            "   ‚Ä¢ get_reserves_data: Reservas internacionales actuales e hist√≥ricas\n"
            "   ‚Ä¢ get_market_data: MERVAL, riesgo pa√≠s, bonos\n"
            "   ‚Ä¢ get_economic_analysis: An√°lisis integral con insights y recomendaciones\n"
            "Funcionalidades: B√∫squeda web de informaci√≥n financiera, procesamiento de datos econ√≥micos actuales\n"
            "Fuente: B√∫squeda web en tiempo real con Tavily\n"
            
            "üåê 2. SERVIDOR TAVILY (B√∫squeda Web Inteligente):\n"
            "Herramientas disponibles:\n"
            "   ‚Ä¢ search: B√∫squeda web general con IA\n"
            "   ‚Ä¢ news_search: Noticias espec√≠ficas en tiempo real\n"
            "Funcionalidades: Noticias financieras, informaci√≥n econ√≥mica actual,\n"
            "investigaci√≥n de inversiones, an√°lisis de mercados globales,\n"
            "contenido educativo financiero, datos en tiempo real\n"
            
            "üíæ 3. SERVIDOR KNOWLEDGE BASE (Memoria Conversacional):\n"
            "Funcionalidades: Docker container con SQLite persistente\n"
            "   ‚Ä¢ Retenci√≥n de preferencias del usuario\n"
            "   ‚Ä¢ Historial de transacciones y consultas\n"
            "   ‚Ä¢ Contexto conversacional continuo\n"
            "   ‚Ä¢ Personalizaci√≥n de respuestas financieras\n"
            "   ‚Ä¢ Registros contables y financieros\n"
            "   ‚Ä¢ B√∫squeda sem√°ntica en historial\n"
            
            "üßÆ 4. SERVIDOR CALCULATOR (C√°lculos Matem√°ticos):\n"
            "Funcionalidades: C√°lculos precisos y confiables\n"
            "   ‚Ä¢ Operaciones aritm√©ticas complejas\n"
            "   ‚Ä¢ Evaluaci√≥n de expresiones matem√°ticas\n"
            "   ‚Ä¢ C√°lculos de inter√©s compuesto y simple\n"
            "   ‚Ä¢ Conversiones de moneda y unidades\n"
            "   ‚Ä¢ C√°lculos de presupuesto y finanzas personales\n"
            "   ‚Ä¢ An√°lisis de ROI y rentabilidad\n"
            
            "üìÖ 5. SERVIDOR GOOGLE CALENDAR (Gesti√≥n de Agenda):\n"
            "Herramientas disponibles:\n"
            "   ‚Ä¢ create_event: Crear eventos con detalles completos\n"
            "   ‚Ä¢ list_events: Listar eventos por rango de fechas\n"
            "   ‚Ä¢ update_event: Modificar eventos existentes\n"
            "   ‚Ä¢ delete_event: Eliminar eventos\n"
            "   ‚Ä¢ check_availability: Verificar disponibilidad horaria\n"
            "Funcionalidades: Service Account OAuth, zona horaria Argentina,\n"
            "recordatorios financieros, reuniones de planificaci√≥n\n"
            
            "üìä 6. SERVIDOR GOOGLE SHEETS (Hojas de C√°lculo Financieras):\n"
            "Herramientas disponibles:\n"
            "   ‚Ä¢ read_sheet: Leer datos de hojas espec√≠ficas\n"
            "   ‚Ä¢ write_sheet: Escribir datos en rangos espec√≠ficos\n"
            "   ‚Ä¢ create_sheet: Crear nuevas hojas de c√°lculo\n"
            "   ‚Ä¢ batch_update: Operaciones masivas en m√∫ltiples rangos\n"
            "   ‚Ä¢ share_sheet: Compartir documentos con permisos\n"
            "   ‚Ä¢ list_files: Explorar archivos en Google Drive\n"
            "Funcionalidades: Service Account, Google Drive integrado,\n"
            "gesti√≥n de presupuestos, registros contables, an√°lisis financiero,\n"
            "creaci√≥n de pesta√±as, lectura de f√≥rmulas\n"
            
            "üéØ CATEGOR√çAS DE INTENCIONES ACTUALIZADAS:\n"
            
            "üìà DATOS ECON√ìMICOS FINANCIEROS:\n"
            "‚Ä¢ COTIZACION_DOLAR: Cotizaciones USD (oficial/blue/MEP/CCL/brecha)\n"
            "‚Ä¢ DATOS_INFLACION: Inflaci√≥n mensual/anual actual\n"
            "‚Ä¢ TASAS_INTERES: BADLAR, LELIQ, plazo fijo\n"
            "‚Ä¢ RESERVAS_INTERNACIONALES: Reservas internacionales actuales/hist√≥ricas\n"
            "‚Ä¢ INDICES_MERCADO: MERVAL, riesgo pa√≠s, bonos\n"
            "‚Ä¢ ANALISIS_ECONOMICO: An√°lisis integral con insights\n"
            
            "üåê B√öSQUEDA E INVESTIGACI√ìN:\n"
            "‚Ä¢ BUSCAR_NOTICIAS_FINANCIERAS: Noticias econ√≥micas en tiempo real\n"
            "‚Ä¢ INVESTIGAR_INVERSIONES: Informaci√≥n sobre activos y mercados\n"
            "‚Ä¢ BUSCAR_INFO_ECONOMICA: Datos econ√≥micos espec√≠ficos web\n"
            "‚Ä¢ INVESTIGAR_TENDENCIAS: An√°lisis de tendencias econ√≥micas\n"
            
            "üìÖ GESTI√ìN DE CALENDARIO:\n"
            "‚Ä¢ CREAR_EVENTO: Agendar reuniones, recordatorios, citas\n"
            "‚Ä¢ CONSULTAR_AGENDA: Ver eventos, disponibilidad, horarios\n"
            "‚Ä¢ GESTIONAR_CALENDARIO: Modificar, eliminar, actualizar eventos\n"
            "‚Ä¢ VERIFICAR_DISPONIBILIDAD: Comprobar horarios libres\n"
            
            "üìä GESTI√ìN DE HOJAS DE C√ÅLCULO:\n"
            "‚Ä¢ GESTIONAR_HOJA_CALCULO: Crear/editar hojas de presupuesto\n"
            "‚Ä¢ REGISTRAR_TRANSACCION: Anotar ingresos/gastos en planillas\n"
            "‚Ä¢ CONSULTAR_REGISTROS: Ver datos financieros de hojas\n"
            "‚Ä¢ COMPARTIR_DOCUMENTO: Compartir planillas financieras\n"
            "‚Ä¢ OPERACIONES_LOTE: Actualizar m√∫ltiples rangos en hojas\n"
            "‚Ä¢ BUSCAR_ARCHIVOS: Explorar archivos en Google Drive\n"
            
            "üßÆ C√ÅLCULOS MATEM√ÅTICOS:\n"
            "‚Ä¢ CALCULAR_MATEMATICO: Operaciones, porcentajes, conversiones\n"
            "‚Ä¢ CALCULAR_FINANCIERO: Inter√©s, pr√©stamos, ROI, rentabilidad\n"
            "‚Ä¢ EVALUAR_EXPRESION: Expresiones matem√°ticas complejas\n"
            "‚Ä¢ CONVERTIR_MONEDA: Conversiones entre divisas\n"
            
            "üíæ MEMORIA Y PERSONALIZACI√ìN:\n"
            "‚Ä¢ RECORDAR_PREFERENCIA: Guardar informaci√≥n personal\n"
            "‚Ä¢ CONSULTAR_HISTORIAL: Revisar interacciones anteriores\n"
            "‚Ä¢ PERSONALIZAR_RESPUESTA: Ajustar comportamiento del asistente\n"
            "‚Ä¢ BUSCAR_MEMORIA: B√∫squeda en historial conversacional\n"
            
            "‚ùì CONSULTAS GENERALES:\n"
            "‚Ä¢ CONSULTA_GENERAL: Preguntas generales sin acciones espec√≠ficas\n"
            "‚Ä¢ EDUCACION_FINANCIERA: Explicaciones de conceptos financieros\n"
            "‚Ä¢ ASESORAMIENTO: Consejos y recomendaciones financieras\n"
            
            "üá¶üá∑ CONTEXTO ARGENTINO ESPEC√çFICO:\n"
            "Jerga y t√©rminos reconocidos:\n"
            "- 'palos verdes' = millones de d√≥lares\n"
            "- 'lucas' = miles de pesos\n"
            "- 'blue', 'oficial', 'MEP', 'CCL' para d√≥lares\n"
            "- 'cueva', 'arbolito', 'financiero' para cambio\n"
            "- Referencias: inflaci√≥n, cepo, brecha cambiaria\n"
            "- Monedas: pesos argentinos (ARS), d√≥lares (USD), euros (EUR)\n"
            "- Zona horaria: America/Argentina/Buenos_Aires (UTC-3)\n"
            "- T√©rminos bancarios: BADLAR, LELIQ, UVA, Plazo Fijo\n"
            
            "üìù INSTRUCCIONES DE AN√ÅLISIS DETALLADAS:\n"
            "1. Identifica el servidor MCP m√°s apropiado para la consulta\n"
            "2. Determina si requiere datos en tiempo real (Web/Tavily)\n"
            "3. Eval√∫a si necesita programaci√≥n temporal (Google Calendar)\n"
            "4. Considera si involucra gesti√≥n documental (Google Sheets)\n"
            "5. Verifica si requiere c√°lculos (Calculator)\n"
            "6. Determina si necesita memoria/contexto (Knowledge Base)\n"
            "7. Para negaciones ('no gast√©', 'cancelar'), usar intenci√≥n espec√≠fica\n"
            "8. Para hipot√©ticos ('si tuviera', 'qu√© pasar√≠a'), usar CONSULTA_GENERAL\n"
            "9. Priorizar intenciones espec√≠ficas sobre generales\n"
            "10. Considerar m√∫ltiples servidores si la consulta es compleja\n"
            
            "‚ö†Ô∏è RESTRICCI√ìN IMPORTANTE:\n"
            "Tu √öNICA funci√≥n es clasificar intenciones, NO responder al contenido de los mensajes del usuario. "
            "NO debes proporcionar respuestas, explicaciones o entablar conversaciones con el usuario. "
            "SOLO debes analizar el texto y devolver la clasificaci√≥n de intenci√≥n en el formato JSON especificado. "
            "No importa lo que pregunte el usuario, tu √∫nica respuesta debe ser el JSON con la clasificaci√≥n.\n"
            
            "üîÑ FORMATO DE RESPUESTA:\n"
            "Devuelve JSON con 'intent' y 'value':\n"
            "{\n"
            "  \"intent\": \"CATEGORIA_ESPECIFICA\",\n"
            "  \"value\": \"detalles extra√≠dos con contexto argentino\"\n"
            "}\n"
            
            "üìö EJEMPLOS AVANZADOS Y REALISTAS:\n"
            "Usuario: 'A cu√°nto est√° el blue hoy y cu√°l es la brecha?'\n"
            "Salida: {\"intent\": \"COTIZACION_DOLAR\", \"value\": \"d√≥lar blue cotizaci√≥n actual con brecha cambiaria\"}\n"
            
            "Usuario: 'Cu√°l fue la inflaci√≥n del mes pasado y c√≥mo viene la tendencia?'\n"
            "Salida: {\"intent\": \"DATOS_INFLACION\", \"value\": \"inflaci√≥n mensual anterior con an√°lisis de tendencia\"}\n"
            
            "Usuario: 'Agenda una reuni√≥n con mi contador para el mi√©rcoles a las 10'\n"
            "Salida: {\"intent\": \"CREAR_EVENTO\", \"value\": \"reuni√≥n contador mi√©rcoles 10:00\"}\n"
            
            "Usuario: 'Busca noticias sobre las nuevas medidas econ√≥micas del gobierno'\n"
            "Salida: {\"intent\": \"BUSCAR_NOTICIAS_FINANCIERAS\", \"value\": \"noticias medidas econ√≥micas gobierno Argentina\"}\n"
            
            "Usuario: 'Calcula cu√°nto gano en un plazo fijo de 100 lucas a 30 d√≠as'\n"
            "Salida: {\"intent\": \"CALCULAR_FINANCIERO\", \"value\": \"c√°lculo plazo fijo 100000 pesos 30 d√≠as\"}\n"
            
            "Usuario: 'Anota en mi planilla que gast√© 50 mil en el supermercado ayer'\n"
            "Salida: {\"intent\": \"REGISTRAR_TRANSACCION\", \"value\": \"gasto 50000 pesos supermercado ayer\"}\n"
            
            "Usuario: 'Dame un an√°lisis completo de c√≥mo est√° la econom√≠a argentina'\n"
            "Salida: {\"intent\": \"ANALISIS_ECONOMICO\", \"value\": \"an√°lisis econ√≥mico integral Argentina actual\"}\n"
            
            "Usuario: 'Record√° que mi l√≠mite mensual de gastos es 200 mil pesos'\n"
            "Salida: {\"intent\": \"RECORDAR_PREFERENCIA\", \"value\": \"l√≠mite mensual gastos 200000 pesos\"}\n"
            
            "Usuario: 'Qu√© inversiones me recomend√°s con la inflaci√≥n actual?'\n"
            "Salida: {\"intent\": \"ASESORAMIENTO\", \"value\": \"recomendaciones inversi√≥n contexto inflaci√≥n actual\"}\n"
            
            "Usuario: 'Compart√≠ mi planilla de gastos con mi esposa'\n"
            "Salida: {\"intent\": \"COMPARTIR_DOCUMENTO\", \"value\": \"compartir planilla gastos esposa\"}\n"
            
            "Usuario: 'Cu√°ndo fue la √∫ltima vez que consult√© el d√≥lar?'\n"
            "Salida: {\"intent\": \"CONSULTAR_HISTORIAL\", \"value\": \"√∫ltima consulta d√≥lar en historial\"}\n"
        )

        self.split_intents_prompt = (
            "Eres un experto en analizar mensajes de usuarios para EconomIAssist, un asistente financiero argentino con capacidades MCP integrales. "
            "El mensaje del usuario puede contener m√∫ltiples intenciones relacionadas con:\n"
            "üè¶ Datos econ√≥micos (Web): d√≥lares, inflaci√≥n, tasas, an√°lisis\n"
            "üåê B√∫squeda web: noticias financieras, investigaci√≥n de inversiones\n"
            "üìÖ Calendario: agendar reuniones, recordatorios financieros\n"
            "üìä Hojas de c√°lculo: registros, presupuestos, compartir documentos\n"
            "üßÆ C√°lculos: operaciones financieras, conversiones, intereses\n"
            "üíæ Memoria: preferencias, historial, personalizaci√≥n\n"
            
            "Reconoce jerga argentina:\n"
            "- 'palos verdes' = millones de d√≥lares\n"
            "- 'lucas' = miles de pesos\n"
            "- 'blue/oficial/MEP/CCL' = tipos de d√≥lar\n"
            "- 'cueva', 'arbolito' = cambio informal\n"
            
            "IMPORTANTE: Tu √öNICA tarea es dividir el mensaje en intenciones separadas. "
            "NO respondas a las consultas del usuario ni ofrezcas explicaciones o contenido adicional. "
            "Divide el mensaje en intenciones separadas, manteniendo el contexto argentino. "
            "Si el mensaje contiene m√∫ltiples preguntas unidas por 'o', 'y', 'adem√°s', 'tambi√©n', divide cada una como intenci√≥n separada. "
            "Devuelve un array JSON de strings. No expliques, solo devuelve el array.\n"
            
            "Ejemplos con contexto argentino:\n"
            "Usuario: 'Me dieron 2 palos verdes. Me conviene pasarlos a pesos o invertir en plazo fijo?'\n"
            "Salida: [\"Me dieron 2 palos verdes.\", \"Me conviene pasarlos a pesos?\", \"Me conviene invertir en plazo fijo?\"]\n"
            
            "Usuario: 'Cu√°nto est√° el blue hoy y cu√°l es la inflaci√≥n de este mes?'\n"
            "Salida: [\"Cu√°nto est√° el blue hoy\", \"cu√°l es la inflaci√≥n de este mes\"]\n"
            
            "Usuario: 'Anota que gast√© 50 lucas en el super y programa reuni√≥n con el contador'\n"
            "Salida: [\"Anota que gast√© 50 lucas en el super\", \"programa reuni√≥n con el contador\"]\n"
            
            "Usuario: 'B√∫scame noticias sobre el nuevo gobierno, calcula mi ROI del a√±o y compart√≠ mi planilla de inversiones'\n"
            "Salida: [\"B√∫scame noticias sobre el nuevo gobierno\", \"calcula mi ROI del a√±o\", \"compart√≠ mi planilla de inversiones\"]\n"
            
            "Usuario: 'Dame un an√°lisis econ√≥mico completo de Argentina'\n"
            "Salida: [\"Dame un an√°lisis econ√≥mico completo de Argentina\"]\n"
            
            "Usuario: 'Record√° que mi l√≠mite de gastos es 300 lucas y av√≠same cuando lo supere'\n"
            "Salida: [\"Record√° que mi l√≠mite de gastos es 300 lucas\", \"av√≠same cuando lo supere\"]\n"
        )

        # Set the logger as an alias to intent_logger
        self.logger = self.intent_logger
    
    def receive_message(self, message: str):
        """Procesa un mensaje del usuario y extrae las intenciones"""
        start_time = time.time()
        
        # First call: count intents
        try:
            # Log model call
            model_call_start = time.time()
            
            count_response = self.client.chat.completions.create(
                messages=[
                    {"role": "system", "content": self.count_intents_prompt},
                    {"role": "user", "content": message},
                    {"role": "user", "content": "Recuerda: Solo devuelve el n√∫mero de intenciones. No respondas a la consulta."}
                ],
                max_tokens=10,
                temperature=0.0,
                top_p=1.0,
                model=self.deployment
            )
            
            # Log successful model call
            self.logger.log_model_call(
                model=self.deployment,
                success=True,
                processing_time=time.time() - model_call_start
            )
            
            try:
                num_intents = int(count_response.choices[0].message.content.strip())
                if num_intents < 1:
                    num_intents = 1
            except Exception:
                num_intents = 1
        except Exception as e:
            # Log failed model call
            self.logger.log_model_call(
                model=self.deployment,
                success=False,
                processing_time=time.time() - model_call_start
            )
            
            self.logger.log_parse_error(
                user_input=message,
                error_message=str(e),
                error_type=type(e).__name__
            )
            
            num_intents = 1  # Default to 1 on error

        # If multiple intents detected, log it
        if num_intents > 1:
            self.logger.info("Multiple intents detected", 
                             count=num_intents, 
                             user_input_preview=message[:50] + "..." if len(message) > 50 else message)

        # If only one intent, classify the whole message
        if num_intents == 1:
            intent_texts = [message]
        else:
            # Ask the model to split the message into its distinct intents
            try:
                split_model_start = time.time()
                
                split_response = self.client.chat.completions.create(
                    messages=[
                        {"role": "system", "content": self.split_intents_prompt},
                        {"role": "user", "content": message},
                        {"role": "user", "content": "Recuerda: Solo devuelve el array JSON. No respondas a la consulta."}
                    ],
                    max_tokens=256,
                    temperature=0.0,
                    top_p=1.0,
                    model=self.deployment
                )
                
                # Log successful model call for splitting
                self.logger.log_model_call(
                    model=self.deployment,
                    success=True,
                    processing_time=time.time() - split_model_start
                )
                
                try:
                    intent_texts = json.loads(split_response.choices[0].message.content)
                    if not isinstance(intent_texts, list) or not all(isinstance(x, str) for x in intent_texts):
                        intent_texts = [message] * num_intents
                    
                    # Log multiple intents split
                    self.logger.log_multiple_intents(
                        user_input=message,
                        intents_count=len(intent_texts),
                        intents=intent_texts
                    )
                    
                except Exception as e:
                    # Log parsing error
                    self.logger.log_parse_error(
                        user_input=message,
                        error_message=f"Error parsing split intents: {str(e)}",
                        error_type="json_parse_error"
                    )
                    
                    intent_texts = [message] * num_intents
                    
            except Exception as e:
                # Log failed model call for splitting
                self.logger.log_model_call(
                    model=self.deployment,
                    success=False,
                    processing_time=time.time() - split_model_start
                )
                
                # Log error
                self.logger.log_parse_error(
                    user_input=message,
                    error_message=str(e),
                    error_type=type(e).__name__
                )
                
                intent_texts = [message] * num_intents

        intent_results = []
        for intent_text in intent_texts:
            try:
                classify_start = time.time()
                
                classify_response = self.client.chat.completions.create(
                    messages=[
                        {"role": "system", "content": self.system_prompt},
                        {"role": "user", "content": intent_text},
                        {"role": "user", "content": "Recuerda: Solo devuelve el JSON con la clasificaci√≥n de intenci√≥n. No respondas a la consulta."}
                    ],
                    max_tokens=4096,
                    temperature=1.0,
                    top_p=1.0,
                    model=self.deployment
                )
                
                # Log successful model call for classification
                self.logger.log_model_call(
                    model=self.deployment,
                    success=True,
                    processing_time=time.time() - classify_start
                )
                
                model_output = classify_response.choices[0].message.content
                try:
                    data = json.loads(model_output)
                    parsed = IntentResponse(**data)
                    
                    # Log intent confidence
                    self.logger.log_intent_confidence(
                        intent=parsed.intent,
                        confidence=0.9  # Assuming high confidence for now
                    )
                    
                    intent_results.append((parsed.intent, parsed.value))
                except Exception as e:
                    # Log parsing error
                    self.logger.log_parse_error(
                        user_input=intent_text,
                        error_message=f"Error parsing response: {str(e)}",
                        error_type="json_parse_error"
                    )
                    
                    intent_results.append(("error", model_output.strip()))
                    
            except Exception as e:
                # Log failed model call for classification
                self.logger.log_model_call(
                    model=self.deployment,
                    success=False,
                    processing_time=time.time() - classify_start
                )
                
                # Log error
                self.logger.log_parse_error(
                    user_input=intent_text,
                    error_message=str(e),
                    error_type=type(e).__name__
                )
                
                intent_results.append(("error", str(e)))

        # Log intent detection completion
        total_processing_time = time.time() - start_time
        self.logger.log_intent_detection(
            user_input=message,
            detected_intents={"intents": [{"intent": i[0], "value": i[1]} for i in intent_results]},
            processing_time=total_processing_time
        )

        print(f"User: {message}\nIntents: {len(intent_results)}\nResponse: {intent_results}\n")
        return intent_results

# # --- MAIN ---
# if __name__ == "__main__":
#     # Ejemplos representativos para testear las capacidades principales del parser
#     examples = [
#         # Consulta de datos econ√≥micos b√°sica
#         "¬øCu√°l es el d√≥lar blue de hoy?",
        
#         # Consulta de inflaci√≥n
#         "¬øCu√°nto fue la inflaci√≥n del mes pasado?",
        
#         # C√°lculo financiero simple
#         "Calculame el 21% de IVA sobre 50000 pesos",
        
#         # Google Calendar
#         "Agendame una reuni√≥n con el contador para el viernes a las 15hs",
        
#         # M√∫ltiples intenciones: Datos econ√≥micos + C√°lculos
#         "A cu√°nto est√° el d√≥lar oficial y cu√°nto ser√≠an 500 d√≥lares en pesos",
        
#         # Consulta con jerga argentina
#         "Tengo 5 palos verdes, ¬øme conviene pasarlos a pesos o comprar MEP?",
        
#         # Registro en Google Sheets
#         "Anot√° que gast√© 30 lucas en el supermercado ayer",
        
#         # B√∫squeda financiera
#         "Buscame noticias sobre las nuevas medidas econ√≥micas del gobierno",
        
#         # Planificaci√≥n con m√∫ltiples herramientas
#         "Calcul√° cu√°nto necesito ahorrar mensualmente para juntar 1 mill√≥n de pesos en 6 meses y agendame recordatorios mensuales",
        
#         # Educaci√≥n financiera y consulta
#         "¬øQu√© son los CEDEARs y a cu√°nto est√° el d√≥lar MEP actualmente?"
#     ]
    
#     print("=== TESTEANDO INTENT PARSER CON EJEMPLOS REPRESENTATIVOS ===\n")
#     parser = IntentParser()
    
#     for i, example in enumerate(examples, 1):
#         print(f"--- EJEMPLO {i}/{len(examples)} ---")
#         print(f"INPUT: {example}")
#         print("-" * 80)
#         parser.receive_message(example)
#         print("=" * 80)
#         print()