import os  # Keep this import at the top
import sys
from openai import AzureOpenAI
from dotenv import load_dotenv
import pydantic
from pydantic import field_validator
import json
import time
import structlog  # Add this import
from typing import Optional, Union


class IntentResponse(pydantic.BaseModel):
    intent: str
    value: str
    depends_on: str = "independiente"  # REQUIRED field - dependency tool name or "independiente" for independent intents
    step: str = "final"  # REQUIRED field - "final" for user-facing actions, "intermedio" for preparatory steps
    
    @field_validator('depends_on', mode='before')
    @classmethod
    def validate_depends_on(cls, v):
        # Ensure depends_on is never null or empty string
        if v is None or v == "":
            return "independiente"
        return v
    
    @field_validator('step', mode='before')
    @classmethod
    def validate_step(cls, v):
        # Ensure step is always valid
        if v is None or v == "":
            return "final"
        if v not in ["final", "intermedio"]:
            return "final"  # Default to final for invalid values
        return v

class MultiIntentResponse(pydantic.BaseModel):
    intents: list[IntentResponse]

class IntentParser:
    def __init__(self):
        # Carga variables de entorno desde .env
        load_dotenv(os.path.join(os.path.dirname(__file__), '../../.env'))
        # Leer credenciales Azure OpenAI desde .env
        self.endpoint = os.getenv("AZURE_OPENAI_API_BASE")
        self.api_key = os.getenv("AZURE_OPENAI_API_KEY")
        self.api_version = os.getenv("AZURE_OPENAI_API_VERSION")
        self.deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")
        # Verificar credenciales
        if not all([self.endpoint, self.api_key, self.api_version, self.deployment]):
            raise ValueError("Faltan credenciales de Azure OpenAI en el archivo .env")
        
        # Create the OpenAI client
        self.client = AzureOpenAI(
            azure_endpoint=self.endpoint,
            api_key=self.api_key,
            api_version=self.api_version
        )
        
        # Initialize intent logger
        try:
            from ..utils.intent_logger import IntentLogger
            self.intent_logger = IntentLogger(parser_id="main_intent_parser")
        except ImportError:
            # Remove the os import here since it's already imported at the top level
            sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
            from utils.intent_logger import IntentLogger
            self.intent_logger = IntentLogger(parser_id="main_intent_parser")
    
        # Set a reference to the logger for use throughout the class
        self.logger = self.intent_logger
    
        self.intent_logger.info("Intent parser instance created")
        
        # Log initialization
        azure_config = {
            "api_base": self.endpoint,
            "api_version": self.api_version,
            "deployment": self.deployment,
            "api_key": "[REDACTED]"  # Redacted for security
        }
        
        self.intent_logger.log_parser_initialization(
            success=True, 
            azure_config=azure_config
        )

        self.count_intents_prompt = (
            "Eres un experto en analizar mensajes de usuarios para EconomIAssist, un asistente financiero integral con capacidades MCP avanzadas. "
            "Tu trabajo es contar cu√°ntas intenciones distintas (acciones o solicitudes) est√°n presentes en el mensaje del usuario. "
            
            "EconomIAssist integra los siguientes servidores MCP con capacidades espec√≠ficas:\n"
            "üè¶ B√∫squeda Web Financiera: Datos econ√≥micos argentinos (d√≥lar, inflaci√≥n, tasas, MERVAL, an√°lisis)\n"
            "üåê Tavily Server: B√∫squeda web inteligente y noticias financieras\n"
            "üíæ Knowledge Base: Memoria conversacional y registros personales\n"
            "üßÆ Calculator: C√°lculos matem√°ticos y financieros precisos\n"
            "üìÖ Google Calendar: Gesti√≥n de agenda y eventos\n"
            "üìä Google Sheets: Hojas de c√°lculo y gesti√≥n documental\n"
            
            "Capacidades que pueden generar intenciones m√∫ltiples:\n"
            "- Consultas econ√≥micas combinadas (d√≥lar + inflaci√≥n + an√°lisis)\n"
            "- Gesti√≥n de registros financieros (anotar + calcular + programar)\n"
            "- An√°lisis e investigaci√≥n (buscar + analizar + recordar)\n"
            "- Planificaci√≥n financiera (calcular + agendar + documentar)\n"
            "- Seguimiento de inversiones y portfolio\n"
            "- Educaci√≥n y asesoramiento personalizado\n"
            
            "Reconoce jerga argentina: 'palos verdes' (millones USD), 'lucas' (miles pesos), 'blue/oficial/MEP/CCL' (d√≥lares)\n"
            
            "Cuenta cada solicitud o acci√≥n distinta que el usuario quiere realizar. "
            "Devuelve SOLO el n√∫mero como un entero. No incluyas ninguna explicaci√≥n o texto adicional.\n"
            
            "Ejemplos con capacidades MCP reales:\n"
            "Usuario: 'Cu√°nto est√° el blue y agendame recordatorio para revisar mis inversiones ma√±ana'\n"
            "Salida: 2\n"
            "Usuario: 'Dame la inflaci√≥n actual, calcula el impacto en mi presupuesto de 500 lucas y b√∫scame noticias al respecto'\n"
            "Salida: 3\n"
            "Usuario: 'Quiero un an√°lisis econ√≥mico completo con recomendaciones'\n"
            "Salida: 1\n"
            "Usuario: 'Anota que gast√© 200 mil en supermercado, calcula cu√°nto me queda del presupuesto mensual y comp√°rteme la planilla'\n"
            "Salida: 3\n"
            "Usuario: 'A cu√°nto est√° el d√≥lar oficial hoy?'\n"
            "Salida: 1\n"
            "Usuario: 'Busca noticias sobre las nuevas medidas del BCRA y programa una reuni√≥n para analizarlas'\n"
            "Salida: 2\n"
            "Usuario: 'No gast√© nada ayer, fue un error en mi registro'\n"
            "Salida: 1\n"
            "IMPORTANTE: Tu √öNICA tarea es contar el n√∫mero de intenciones. NO respondas a las consultas del usuario ni ofrezcas explicaciones. "
            "Devuelve SOLO el n√∫mero como un entero. No incluyas ninguna explicaci√≥n o texto adicional.\n"
        )

        self.system_prompt = (
            "Eres un experto analizador de intenciones para EconomIAssist, un asistente financiero integral especializado en el contexto econ√≥mico argentino.\n"
            
            "üè¶ SISTEMA MCP INTEGRADO - HERRAMIENTAS ESPEC√çFICAS:\n"
            
            # "ÔøΩ 1. GOOGLE SHEETS (Hojas de C√°lculo Financieras):\n"
            # "Herramientas disponibles:\n"
            # "   ‚Ä¢ get_sheet_data: Leer datos de hojas espec√≠ficas\n"
            # "   ‚Ä¢ get_sheet_formulas: Obtener f√≥rmulas de celdas\n"
            # "   ‚Ä¢ update_cells: Actualizar celdas espec√≠ficas\n"
            # "   ‚Ä¢ batch_update_cells: Actualizar m√∫ltiples rangos\n"
            # "   ‚Ä¢ add_rows: Agregar filas a hojas\n"
            # "   ‚Ä¢ add_columns: Agregar columnas a hojas\n"
            # "   ‚Ä¢ list_sheets: Listar todas las hojas\n"
            # "   ‚Ä¢ copy_sheet: Copiar hojas existentes\n"
            # "   ‚Ä¢ rename_sheet: Renombrar hojas\n"
            # "   ‚Ä¢ get_multiple_sheet_data: Leer datos de m√∫ltiples hojas\n"
            # "   ‚Ä¢ get_multiple_spreadsheet_summary: Resumen de m√∫ltiples hojas\n"
            # "   ‚Ä¢ create_spreadsheet: Crear nuevas hojas de c√°lculo\n"
            # "   ‚Ä¢ create_sheet: Crear nuevas pesta√±as\n"
            # "   ‚Ä¢ list_spreadsheets: Listar todas las hojas de c√°lculo\n"
            # "   ‚Ä¢ share_spreadsheet: Compartir hojas de c√°lculo\n"
            
            # "ÔøΩ 2. GOOGLE CALENDAR (Gesti√≥n de Agenda):\n"
            # "Herramientas disponibles:\n"
            # "   ‚Ä¢ create_event: Crear eventos con detalles completos\n"
            # "   ‚Ä¢ list_events: Listar eventos por rango de fechas\n"
            # "   ‚Ä¢ update_event: Modificar eventos existentes\n"
            # "   ‚Ä¢ delete_event: Eliminar eventos\n"
            
            # "üßÆ 3. CALCULADORA (C√°lculos Matem√°ticos):\n"
            # "Herramienta disponible:\n"
            # "   ‚Ä¢ calculate: Operaciones matem√°ticas y financieras precisas\n"
            
            # "üåê 4. TAVILY WEB SEARCH (B√∫squeda e Investigaci√≥n):\n"
            # "Herramientas disponibles:\n"
            # "   ‚Ä¢ tavily-search: B√∫squeda web general con IA\n"
            # "   ‚Ä¢ tavily-extract: Extraer informaci√≥n espec√≠fica de URLs\n"
            # "   ‚Ä¢ tavily-crawl: Rastrear sitios web para datos\n"
            # "   ‚Ä¢ tavily-map: Mapear y analizar contenido web\n"
            
            # "ÔøΩ 5. RAG (Retrieval-Augmented Generation):\n"
            # "Herramientas disponibles:\n"
            # "   ‚Ä¢ query_documents: Consultar documentos espec√≠ficos\n"
            # "   ‚Ä¢ search_knowledge: Buscar en base de conocimiento\n"
            # "   ‚Ä¢ get_context: Obtener contexto relevante\n"
            # "   ‚Ä¢ analyze_content: Analizar contenido de documentos\n"
            
            # "üíæ 6. MEMORIA/CONTEXTO DE SESI√ìN:\n"
            # "Herramientas disponibles:\n"
            # "   ‚Ä¢ store_preference: Guardar preferencias del usuario\n"
            # "   ‚Ä¢ retrieve_preference: Consultar preferencias guardadas\n"
            # "   ‚Ä¢ store_memory: Guardar informaci√≥n en memoria\n"
            # "   ‚Ä¢ search_memory: Buscar en memoria conversacional\n"
            # "   ‚Ä¢ get_session_history: Obtener historial de sesi√≥n\n"
            # "   ‚Ä¢ update_user_profile: Actualizar perfil del usuario\n"
            
            # "‚ùì 7. CONSULTAS GENERALES (Sin herramientas espec√≠ficas):\n"
            # "Tipos de consulta:\n"
            # "   ‚Ä¢ general_query: Preguntas generales sin acciones espec√≠ficas\n"
            # "   ‚Ä¢ financial_education: Explicaciones de conceptos financieros\n"
            # "   ‚Ä¢ advice_request: Consejos y recomendaciones financieras\n"
            # "   ‚Ä¢ conversational: Interacciones conversacionales simples\n"
            
            "üéØ MAPEO DE INTENCIONES A HERRAMIENTAS ESPEC√çFICAS:\n"
            
            "ÔøΩ GOOGLE SHEETS:\n"
            "‚Ä¢ get_sheet_data: Leer datos financieros, presupuestos, registros\n"
            "‚Ä¢ get_sheet_formulas: Consultar f√≥rmulas de c√°lculos financieros\n"
            "‚Ä¢ update_cells: Modificar o sobreescribir celdas existentes\n"
            "‚Ä¢ batch_update_cells: Actualizar m√∫ltiples registros\n"
            "‚Ä¢ add_rows: Agregar nuevos registros financieros\n"
            "‚Ä¢ add_columns: Expandir categor√≠as de presupuesto\n"
            "‚Ä¢ list_sheets: Ver todas las hojas financieras\n"
            "‚Ä¢ copy_sheet: Duplicar plantillas de presupuesto\n"
            "‚Ä¢ rename_sheet: Organizar hojas por per√≠odo/categor√≠a\n"
            "‚Ä¢ get_multiple_sheet_data: Consolidar datos financieros\n"
            "‚Ä¢ get_multiple_spreadsheet_summary: Resumen de portfolios\n"
            "‚Ä¢ create_spreadsheet: Crear nuevos presupuestos/registros\n"
            "‚Ä¢ create_sheet: Agregar nuevas pesta√±as tem√°ticas\n"
            "‚Ä¢ list_spreadsheets: Ver todas las hojas de c√°lculo\n"
            "‚Ä¢ share_spreadsheet: Compartir presupuestos familiares\n"
            
            "üìÖ GOOGLE CALENDAR:\n"
            "‚Ä¢ create_event: Agendar reuniones financieras, recordatorios\n"
            "‚Ä¢ list_events: Ver agenda financiera, pr√≥ximos vencimientos\n"
            "‚Ä¢ update_event: Modificar citas con contador/asesor\n"
            "‚Ä¢ delete_event: Cancelar reuniones financieras\n"
            
            "üßÆ CALCULADORA:\n"
            "‚Ä¢ calculate: Operaciones matem√°ticas, c√°lculos financieros, conversiones, porcentajes, intereses\n"
            
            "üåê TAVILY WEB SEARCH:\n"
            "‚Ä¢ tavily-search: B√∫squeda de noticias econ√≥micas, informaci√≥n financiera\n"
            "‚Ä¢ tavily-extract: Extraer datos espec√≠ficos de sitios financieros\n"
            "‚Ä¢ tavily-crawl: Investigar tendencias del mercado\n"
            "‚Ä¢ tavily-map: Analizar informaci√≥n econ√≥mica compleja\n"
            
            "üìö RAG:\n"
            "‚Ä¢ query_documents: Consultar documentos econ√≥micos espec√≠ficos\n"
            "‚Ä¢ search_knowledge: Buscar conceptos financieros\n"
            "‚Ä¢ get_context: Obtener contexto para consultas complejas\n"
            "‚Ä¢ analyze_content: Analizar documentos financieros\n"
            
            "üíæ MEMORIA/CONTEXTO:\n"
            "‚Ä¢ store_preference: Guardar l√≠mites de gasto, objetivos financieros\n"
            "‚Ä¢ retrieve_preference: Consultar configuraciones personales\n"
            "‚Ä¢ store_memory: Recordar informaci√≥n importante del usuario\n"
            "‚Ä¢ search_memory: Buscar interacciones anteriores\n"
            "‚Ä¢ get_session_history: Ver historial de consultas\n"
            "‚Ä¢ update_user_profile: Actualizar informaci√≥n personal\n"
            
            "‚ùì CONSULTAS GENERALES:\n"
            "‚Ä¢ general_query: Preguntas generales sobre econom√≠a/finanzas\n"
            "‚Ä¢ financial_education: Explicaciones de conceptos financieros\n"
            "‚Ä¢ advice_request: Solicitudes de asesoramiento financiero\n"
            "‚Ä¢ conversational: Saludos, agradecimientos, charla casual\n"
            
            "Fin de las herramientas disponibles. El value a completar debe ser alguna de las opciones anteriores SI O SI\n"
            
            "üá¶üá∑ CONTEXTO ARGENTINO ESPEC√çFICO:\n"
            "Jerga y t√©rminos reconocidos:\n"
            "- 'palos verdes' = millones de d√≥lares\n"
            "- 'lucas' = miles de pesos\n"
            "- 'blue', 'oficial', 'MEP', 'CCL' para d√≥lares\n"
            "- 'cueva', 'arbolito', 'financiero' para cambio\n"
            "- Referencias: inflaci√≥n, cepo, brecha cambiaria\n"
            "- Monedas: pesos argentinos (ARS), d√≥lares (USD), euros (EUR)\n"
            "- Zona horaria: America/Argentina/Buenos_Aires (UTC-3)\n"
            "- T√©rminos bancarios: BADLAR, LELIQ, UVA, Plazo Fijo\n"
            
            "üìù INSTRUCCIONES DE MAPEO:\n"
            "1. Identifica la herramienta EXACTA m√°s apropiada\n"
            "2. Para datos econ√≥micos ‚Üí usar tavily-search\n"
            "3. Para c√°lculos ‚Üí usar calculate\n"
            "4. Para hojas de c√°lculo ‚Üí usar herramientas espec√≠ficas de Google Sheets\n"
            "5. Para calendario ‚Üí usar herramientas espec√≠ficas de Google Calendar\n"
            "6. Para memoria/preferencias ‚Üí usar herramientas de memoria\n"
            "7. Para documentos ‚Üí usar herramientas RAG\n"
            "8. Para consultas educativas ‚Üí usar RAG o general_query\n"
            "9. Para conversaci√≥n simple ‚Üí usar conversational\n"
            "10. Priorizar herramientas espec√≠ficas sobre generales\n"
            
            "‚ö†Ô∏è RESTRICCI√ìN IMPORTANTE:\n"
            "Tu √öNICA funci√≥n es mapear intenciones a herramientas espec√≠ficas, NO responder al contenido. "
            "Devuelve el nombre EXACTO de la herramienta que debe usarse.\n"
            
            " FORMATO DE RESPUESTA:\n"
            "Devuelve JSON con 'intent' (nombre herramienta EXACTO) y 'value' (par√°metros):\n"
            "{\n"
            "  \"intent\": \"NOMBRE_HERRAMIENTA_EXACTO\",\n"
            "  \"value\": \"par√°metros espec√≠ficos para la herramienta\"\n"
            "}\n"
            
            "üìö EJEMPLOS CON HERRAMIENTAS ESPEC√çFICAS:\n"
            "Usuario: 'A cu√°nto est√° el blue hoy?'\n"
            "Salida: {\"intent\": \"tavily-search\", \"value\": \"cotizaci√≥n d√≥lar blue hoy Argentina\"}\n"
            
            "Usuario: 'Gan√© la loter√≠a y me dieron 3 palos verdes'\n"
            "Salida: {\"intent\": \"add_rows\", \"value\": \"registrar ingreso 3 millones USD por loter√≠a\"}\n"
            
            "Usuario: 'Calcula 100 lucas al 50% anual por 6 meses'\n"
            "Salida: {\"intent\": \"calculate\", \"value\": \"100000 * (1 + 0.50/2)^1\"}\n"
            
            "Usuario: 'Agenda reuni√≥n con contador mi√©rcoles 10am'\n"
            "Salida: {\"intent\": \"create_event\", \"value\": \"reuni√≥n contador mi√©rcoles 10:00\"}\n"
            
            "Usuario: 'Anota que gast√© 50 mil en super'\n"
            "Salida: {\"intent\": \"add_rows\", \"value\": \"registrar gasto 50000 pesos supermercado\"}\n"
            
            "Usuario: 'Mostr√° mi presupuesto del mes'\n"
            "Salida: {\"intent\": \"get_sheet_data\", \"value\": \"presupuesto mensual datos\"}\n"
            
            "Usuario: 'Compart√≠ mi planilla con mi esposa'\n"
            "Salida: {\"intent\": \"share_spreadsheet\", \"value\": \"compartir planilla esposa\"}\n"
            
            "Usuario: 'Record√° que mi l√≠mite es 200 mil'\n"
            "Salida: {\"intent\": \"store_preference\", \"value\": \"l√≠mite mensual 200000 pesos\"}\n"
            
            "Usuario: 'Busca noticias sobre inflaci√≥n'\n"
            "Salida: {\"intent\": \"tavily-search\", \"value\": \"noticias inflaci√≥n Argentina\"}\n"
            
            "Usuario: 'Qu√© es el carry trade?'\n"
            "Salida: {\"intent\": \"financial_education\", \"value\": \"carry trade concepto financiero\"}\n"
            
            "Usuario: 'Hola, c√≥mo est√°s?'\n"
            "Salida: {\"intent\": \"conversational\", \"value\": \"saludo casual\"}\n"
            
            "Usuario: 'Qu√© me recomend√°s para invertir?'\n"
            "Salida: {\"intent\": \"advice_request\", \"value\": \"recomendaciones inversi√≥n\"}\n"
            
            "Usuario: 'Consult√° mis documentos sobre plazo fijo'\n"
            "Salida: {\"intent\": \"query_documents\", \"value\": \"plazo fijo informaci√≥n documentos\"}\n"
        )

        self.split_intents_prompt = (
            "Eres un experto en analizar mensajes de usuarios para EconomIAssist, un asistente financiero argentino con capacidades MCP integrales. "
            "El mensaje del usuario puede contener m√∫ltiples intenciones relacionadas con:\n"
            "üè¶ Datos econ√≥micos (Web): d√≥lares, inflaci√≥n, tasas, an√°lisis\n"
            "üåê B√∫squeda web: noticias financieras, investigaci√≥n de inversiones\n"
            "üìÖ Calendario: agendar reuniones, recordatorios financieros\n"
            "üìä Hojas de c√°lculo: registros, presupuestos, compartir documentos\n"
            "üßÆ C√°lculos: operaciones financieras, conversiones, intereses\n"
            "üíæ Memoria: preferencias, historial, personalizaci√≥n\n"
            
            "Reconoce jerga argentina:\n"
            "- 'palos verdes' = millones de d√≥lares\n"
            "- 'lucas' = miles de pesos\n"
            "- 'blue/oficial/MEP/CCL' = tipos de d√≥lar\n"
            "- 'cueva', 'arbolito' = cambio informal\n"
            
            "REGLAS ESPEC√çFICAS PARA REGISTRO DE TRANSACCIONES:\n"
            "- Si el usuario menciona recibir dinero, ganarlo o ingresos (ej: 'gan√© la loter√≠a y me dieron X'), agrupa toda la informaci√≥n del ingreso en UNA sola intenci√≥n\n"
            "- Si el usuario menciona gastos o egresos, agrupa toda la informaci√≥n del gasto en UNA sola intenci√≥n\n"
            "- Las preguntas sobre qu√© hacer con el dinero son intenciones SEPARADAS\n"
            
            "IMPORTANTE: Tu √öNICA tarea es dividir el mensaje en intenciones separadas. "
            "NO respondas a las consultas del usuario ni ofrezcas explicaciones o contenido adicional. "
            "Divide el mensaje en intenciones separadas, manteniendo el contexto argentino. "
            "Si el mensaje contiene m√∫ltiples preguntas unidas por 'o', 'y', 'adem√°s', 'tambi√©n', divide cada una como intenci√≥n separada. "
            "Devuelve un array JSON de strings. No expliques, solo devuelve el array.\n"
            
            "Ejemplos con contexto argentino:\n"
            "Usuario: 'Gan√© la loter√≠a y me dieron 3 palos verdes. Me conviene pasarlos a pesos o invertir en bitcoin?'\n"
            "Salida: [\"Gan√© la loter√≠a y me dieron 3 palos verdes\", \"Me conviene pasarlos a pesos?\", \"Me conviene invertir en bitcoin?\"]\n"
            
            "Usuario: 'Me dieron 2 palos verdes. Me conviene pasarlos a pesos o invertir en plazo fijo?'\n"
            "Salida: [\"Me dieron 2 palos verdes\", \"Me conviene pasarlos a pesos?\", \"Me conviene invertir en plazo fijo?\"]\n"
            
            "Usuario: 'Cu√°nto est√° el blue hoy y cu√°l es la inflaci√≥n de este mes?'\n"
            "Salida: [\"Cu√°nto est√° el blue hoy\", \"cu√°l es la inflaci√≥n de este mes\"]\n"
            
            "Usuario: 'Anota que gast√© 50 lucas en el super y programa reuni√≥n con el contador'\n"
            "Salida: [\"Anota que gast√© 50 lucas en el super\", \"programa reuni√≥n con el contador\"]\n"
            
            "Usuario: 'B√∫scame noticias sobre el nuevo gobierno, calcula mi ROI del a√±o y compart√≠ mi planilla de inversiones'\n"
            "Salida: [\"B√∫scame noticias sobre el nuevo gobierno\", \"calcula mi ROI del a√±o\", \"compart√≠ mi planilla de inversiones\"]\n"
            
            "Usuario: 'Dame un an√°lisis econ√≥mico completo de Argentina'\n"
            "Salida: [\"Dame un an√°lisis econ√≥mico completo de Argentina\"]\n"
            
            "Usuario: 'Record√° que mi l√≠mite de gastos es 300 lucas y av√≠same cuando lo supere'\n"
            "Salida: [\"Record√° que mi l√≠mite de gastos es 300 lucas\", \"av√≠same cuando lo supere\"]\n"
        )

        self.expansion_prompt = (
            "Eres un experto en expansi√≥n de flujos de Google Sheets y Google Calendar para EconomIAssist. "
            "Tu tarea es expandir intenciones que requieren operaciones multi-paso y determinar cu√°l es el paso FINAL bas√°ndote en la intenci√≥n REAL del usuario.\n"
            
            "üéØ HERRAMIENTAS GOOGLE SHEETS DISPONIBLES:\n"
            "‚Ä¢ list_spreadsheets: Listar hojas de c√°lculo disponibles\n"
            "‚Ä¢ list_sheets: Listar pesta√±as de una hoja espec√≠fica\n"
            "‚Ä¢ get_sheet_data: Leer datos de hojas espec√≠ficas\n"
            "‚Ä¢ add_rows: Agregar filas (registros financieros)\n"
            "‚Ä¢ update_cells: Actualizar celdas espec√≠ficas\n"
            "‚Ä¢ batch_update_cells: Actualizar m√∫ltiples rangos\n"
            "‚Ä¢ create_sheet: Crear nuevas pesta√±as\n"
            "‚Ä¢ share_spreadsheet: Compartir hojas de c√°lculo\n"
            "‚Ä¢ copy_sheet: Copiar hojas existentes\n"
            "‚Ä¢ rename_sheet: Renombrar hojas\n"
            
            "üéØ HERRAMIENTAS GOOGLE CALENDAR DISPONIBLES:\n"
            "‚Ä¢ create_event: Crear eventos\n"
            "‚Ä¢ update_event: Actualizar eventos\n"
            "‚Ä¢ list_events: Listar eventos\n"
            "‚Ä¢ delete_event: Eliminar eventos\n"
            
            "üß† AN√ÅLISIS CONTEXTUAL PARA DETERMINAR PASO FINAL:\n"
            "Analiza QU√â est√° pidiendo realmente el usuario para determinar cu√°l es la acci√≥n final:\n"
            
            "EJEMPLOS DE INTENCI√ìN REAL:\n"
            "‚Ä¢ 'Listar archivos' ‚Üí FINAL: list_spreadsheets\n"
            "‚Ä¢ 'Listar hojas de un archivo' ‚Üí list_spreadsheets (intermedio) + FINAL: list_sheets\n"
            "‚Ä¢ 'Ver mis datos' ‚Üí list_spreadsheets + list_sheets + FINAL: get_sheet_data\n"
            "‚Ä¢ 'Anotar gasto' ‚Üí list_spreadsheets + list_sheets + get_sheet_data + FINAL: add_rows\n"
            "‚Ä¢ 'Actualizar registro' ‚Üí list_spreadsheets + list_sheets + get_sheet_data + FINAL: update_cells\n"
            "‚Ä¢ 'Crear nueva pesta√±a' ‚Üí list_spreadsheets + FINAL: create_sheet\n"
            "‚Ä¢ 'Compartir planilla' ‚Üí FINAL: share_spreadsheet\n"
            "‚Ä¢ 'Ver agenda' ‚Üí FINAL: list_events\n"
            "‚Ä¢ 'Agendar reuni√≥n' ‚Üí tavily-search (fecha actual) + FINAL: create_event\n"
            
            "‚ö†Ô∏è REGLAS DE EXPANSI√ìN CONTEXTUAL:\n"
            "1. IDENTIFICA la intenci√≥n REAL del usuario (qu√© quiere lograr)\n"
            "2. DETERMINA cu√°l herramienta satisface directamente esa intenci√≥n (esa es FINAL)\n"
            "3. AGREGA solo los pasos previos necesarios (esos son INTERMEDIO)\n"
            "4. Para operaciones de escritura (add_rows, update_cells): incluye navegaci√≥n completa\n"
            "5. Para operaciones de lectura: incluye solo la navegaci√≥n necesaria hasta llegar al objetivo\n"
            "6. Para create_event/update_event: incluye tavily-search para fechas relativas\n"
            "7. Para herramientas que no requieren expansi√≥n: mantener como FINAL √∫nico\n"
            
            "üéØ CLASIFICACI√ìN DE PASOS (CONTEXTUAL):\n"
            "- 'intermedio': Pasos que PREPARAN para llegar al objetivo del usuario\n"
            "- 'final': El paso que CUMPLE directamente lo que pidi√≥ el usuario\n"
            
            "üìù FORMATO DE RESPUESTA:\n"
            "Devuelve un array JSON con las intenciones expandidas. Cada intenci√≥n debe tener:\n"
            "- 'intent': nombre exacto de la herramienta\n"
            "- 'value': descripci√≥n espec√≠fica de la acci√≥n\n"
            "- 'step': 'intermedio' o 'final' seg√∫n la intenci√≥n REAL del usuario\n"
            
            "üá¶üá∑ EJEMPLOS DE EXPANSI√ìN CONTEXTUAL:\n"
            
            "Input: [{\"intent\": \"list_spreadsheets\", \"value\": \"listar archivos disponibles\"}]\n"
            "An√°lisis: Usuario quiere VER archivos ‚Üí list_spreadsheets es el objetivo final\n"
            "Output: [{\"intent\": \"list_spreadsheets\", \"value\": \"listar archivos disponibles\", \"step\": \"final\"}]\n"
            
            "Input: [{\"intent\": \"list_sheets\", \"value\": \"listar hojas de archivo financiero\"}]\n"
            "An√°lisis: Usuario quiere VER hojas ‚Üí necesita navegar a archivo primero, luego listar hojas\n"
            "Output: [\n"
            "  {\"intent\": \"list_spreadsheets\", \"value\": \"listar hojas de c√°lculo disponibles\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"list_sheets\", \"value\": \"listar hojas de archivo financiero\", \"step\": \"final\"}\n"
            "]\n"
            
            "Input: [{\"intent\": \"get_sheet_data\", \"value\": \"presupuesto mensual datos\"}]\n"
            "An√°lisis: Usuario quiere VER datos ‚Üí necesita navegar hasta la hoja espec√≠fica\n"
            "Output: [\n"
            "  {\"intent\": \"list_spreadsheets\", \"value\": \"listar hojas de c√°lculo disponibles\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"list_sheets\", \"value\": \"listar pesta√±as de la hoja seleccionada\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"get_sheet_data\", \"value\": \"presupuesto mensual datos\", \"step\": \"final\"}\n"
            "]\n"
            
            "Input: [{\"intent\": \"add_rows\", \"value\": \"registrar gasto 50000 pesos supermercado\"}]\n"
            "An√°lisis: Usuario quiere REGISTRAR gasto ‚Üí necesita navegaci√≥n completa + estructura\n"
            "Output: [\n"
            "  {\"intent\": \"list_spreadsheets\", \"value\": \"listar hojas de c√°lculo disponibles\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"list_sheets\", \"value\": \"listar pesta√±as de la hoja seleccionada\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"get_sheet_data\", \"value\": \"obtener encabezados y estructura de la hoja\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"add_rows\", \"value\": \"registrar gasto 50000 pesos supermercado\", \"step\": \"final\"}\n"
            "]\n"
            
            "Input: [{\"intent\": \"create_sheet\", \"value\": \"nueva pesta√±a gastos diciembre\"}]\n"
            "An√°lisis: Usuario quiere CREAR pesta√±a ‚Üí necesita acceso al archivo primero\n"
            "Output: [\n"
            "  {\"intent\": \"list_spreadsheets\", \"value\": \"listar hojas de c√°lculo disponibles\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"create_sheet\", \"value\": \"nueva pesta√±a gastos diciembre\", \"step\": \"final\"}\n"
            "]\n"
            
            "Input: [{\"intent\": \"share_spreadsheet\", \"value\": \"compartir planilla esposa\"}]\n"
            "An√°lisis: Usuario quiere COMPARTIR ‚Üí share_spreadsheet es el objetivo directo\n"
            "Output: [{\"intent\": \"share_spreadsheet\", \"value\": \"compartir planilla esposa\", \"step\": \"final\"}]\n"
            
            "Input: [{\"intent\": \"list_events\", \"value\": \"ver agenda pr√≥xima semana\"}]\n"
            "An√°lisis: Usuario quiere VER agenda ‚Üí list_events es el objetivo directo\n"
            "Output: [{\"intent\": \"list_events\", \"value\": \"ver agenda pr√≥xima semana\", \"step\": \"final\"}]\n"
            
            "Input: [{\"intent\": \"create_event\", \"value\": \"reuni√≥n contador ma√±ana 10am\"}]\n"
            "An√°lisis: Usuario quiere AGENDAR ‚Üí necesita fecha actual para interpretar 'ma√±ana'\n"
            "Output: [\n"
            "  {\"intent\": \"tavily-search\", \"value\": \"fecha actual Argentina hoy\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"create_event\", \"value\": \"reuni√≥n contador ma√±ana 10am\", \"step\": \"final\"}\n"
            "]\n"
            
            "Input: [{\"intent\": \"calculate\", \"value\": \"100000 * 1.5\"}]\n"
            "An√°lisis: Usuario quiere CALCULAR ‚Üí no requiere expansi√≥n\n"
            "Output: [{\"intent\": \"calculate\", \"value\": \"100000 * 1.5\", \"step\": \"final\"}]\n"
            
            "Input: [{\"intent\": \"tavily-search\", \"value\": \"cotizaci√≥n d√≥lar blue\"}, {\"intent\": \"add_rows\", \"value\": \"registrar compra d√≥lares\"}]\n"
            "An√°lisis: Usuario quiere BUSCAR cotizaci√≥n Y REGISTRAR compra ‚Üí dos objetivos separados\n"
            "Output: [\n"
            "  {\"intent\": \"tavily-search\", \"value\": \"cotizaci√≥n d√≥lar blue\", \"step\": \"final\"},\n"
            "  {\"intent\": \"list_spreadsheets\", \"value\": \"listar hojas de c√°lculo disponibles\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"list_sheets\", \"value\": \"listar pesta√±as de la hoja seleccionada\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"get_sheet_data\", \"value\": \"obtener encabezados y estructura de la hoja\", \"step\": \"intermedio\"},\n"
            "  {\"intent\": \"add_rows\", \"value\": \"registrar compra d√≥lares\", \"step\": \"final\"}\n"
            "]\n"
            
            "üéØ REGLAS FINALES:\n"
            "1. ANALIZA qu√© quiere lograr el usuario (su intenci√≥n real)\n"
            "2. IDENTIFICA cu√°l herramienta cumple directamente esa intenci√≥n\n"
            "3. ESA herramienta es el paso 'final'\n"
            "4. AGREGA solo los pasos previos necesarios como 'intermedio'\n"
            "5. Para herramientas sin expansi√≥n: siempre 'final'\n"
            "6. Para m√∫ltiples intenciones: analiza cada una por separado\n"
        )

        self.dependency_prompt = (
            "Eres un experto en analizar mensajes de usuarios para EconomIAssist, un asistente financiero argentino. "
            "Tu tarea es detectar DEPENDENCIAS L√ìGICAS entre intenciones cuando una acci√≥n necesita el resultado de otra para ejecutarse correctamente.\n"
            
            "‚ö†Ô∏è REGLAS CR√çTICAS:\n"
            "1. DEBES mantener EXACTAMENTE la misma cantidad de intenciones que recibiste\n"
            "2. NO elimines ni combines intenciones\n"
            "3. NO modifiques los campos 'intent', 'value' y 'step' - c√≥pialos EXACTAMENTE como los recibiste\n"
            "4. SOLO agrega el campo 'depends_on' a cada intenci√≥n\n"
            "5. El campo 'depends_on' DEBE estar presente en TODAS las intenciones:\n"
            "   - Si hay dependencia: nombre exacto de la herramienta de la cual depende\n"
            "   - Si NO hay dependencia: √öNICAMENTE \"independiente\" (nunca null, vac√≠o, ni otro valor)\n"
            "6. IMPORTANTE: Para intenciones independientes usa EXCLUSIVAMENTE la palabra \"independiente\"\n"
            "7. PRESERVA el campo 'step' exactamente como lo recibiste\n"
            
            "Si recibes intenciones expandidas de Google Sheets (ej: list_spreadsheets ‚Üí list_sheets ‚Üí add_rows), "
            "mant√©n esa secuencia completa con las dependencias apropiadas.\n"
            "Si recibes intenciones expandidas de Google Calendar (ej: tavily-search ‚Üí create_event), "
            "mant√©n esa secuencia completa con las dependencias apropiadas.\n"
            
            "üß† AN√ÅLISIS CONTEXTUAL:\n"
            "No te limites a buscar palabras espec√≠ficas. Analiza el CONTEXTO y la L√ìGICA de la consulta:\n"
            "- ¬øUna acci√≥n necesita informaci√≥n de la otra?\n"
            "- ¬øEl orden de ejecuci√≥n es importante?\n"
            "- ¬øUna tarea no tiene sentido sin el resultado de la anterior?\n"
            "- ¬øEl usuario implica una secuencia l√≥gica?\n"
            "- Para secuencias de Google Sheets: list_spreadsheets ‚Üí list_sheets ‚Üí get_sheet_data ‚Üí [acci√≥n principal]\n"
            "- Para secuencias de Google Calendar: tavily-search ‚Üí [acci√≥n principal]\n"
            "- get_sheet_data verifica encabezados y estructura antes de manipular datos\n"
            "- tavily-search obtiene fecha actual para resolver referencias temporales relativas\n"
            
            "üìù FORMATO DE RESPUESTA:\n"
            "Devuelve un array JSON con TODAS las intenciones recibidas, cada una con:\n"
            "- 'intent': copia EXACTA del nombre de herramienta recibido\n"
            "- 'value': copia EXACTA de la descripci√≥n recibida\n"
            "- 'step': copia EXACTA del campo step recibido ('intermedio' o 'final')\n"
            "- 'depends_on': OBLIGATORIO - nombre de la herramienta de dependencia o \"independiente\" si no hay\n"
            
            "üá¶üá∑ EJEMPLOS CON AN√ÅLISIS CONTEXTUAL:\n"
            
            "Input: 4 intenciones expandidas\n"
            "Output: EXACTAMENTE 4 intenciones con depends_on OBLIGATORIO\n"
            
            "Usuario: 'Busc√° el precio del blue y calcul√° cu√°nto son 500 lucas en d√≥lares'\n"
            "Input: [{\"intent\": \"tavily-search\", \"value\": \"precio d√≥lar blue\", \"step\": \"final\"}, {\"intent\": \"calculate\", \"value\": \"500000 pesos a d√≥lares\", \"step\": \"final\"}]\n"
            "An√°lisis: El c√°lculo NECESITA el precio actual para ser preciso\n"
            "Salida: [{\"intent\": \"tavily-search\", \"value\": \"precio d√≥lar blue\", \"step\": \"final\", \"depends_on\": \"independiente\"}, "
            "{\"intent\": \"calculate\", \"value\": \"500000 pesos a d√≥lares\", \"step\": \"final\", \"depends_on\": \"tavily-search\"}]\n"
            
            "Usuario: 'Anota que gast√© 50 mil en super' (expandido)\n"
            "Input: [{\"intent\": \"list_spreadsheets\", \"value\": \"listar hojas disponibles\", \"step\": \"intermedio\"}, "
            "{\"intent\": \"list_sheets\", \"value\": \"listar pesta√±as\", \"step\": \"intermedio\"}, "
            "{\"intent\": \"get_sheet_data\", \"value\": \"obtener encabezados y estructura\", \"step\": \"intermedio\"}, "
            "{\"intent\": \"add_rows\", \"value\": \"registrar gasto 50000 pesos supermercado\", \"step\": \"final\"}]\n"
            "An√°lisis: Secuencia l√≥gica de Google Sheets, cada paso depende del anterior\n"
            "Salida: [{\"intent\": \"list_spreadsheets\", \"value\": \"listar hojas disponibles\", \"step\": \"intermedio\", \"depends_on\": \"independiente\"}, "
            "{\"intent\": \"list_sheets\", \"value\": \"listar pesta√±as\", \"step\": \"intermedio\", \"depends_on\": \"list_spreadsheets\"}, "
            "{\"intent\": \"get_sheet_data\", \"value\": \"obtener encabezados y estructura\", \"step\": \"intermedio\", \"depends_on\": \"list_sheets\"}, "
            "{\"intent\": \"add_rows\", \"value\": \"registrar gasto 50000 pesos supermercado\", \"step\": \"final\", \"depends_on\": \"get_sheet_data\"}]\n"
            
            "Usuario: 'Mir√° mi agenda y busc√° noticias econ√≥micas'\n"
            "Input: [{\"intent\": \"list_events\", \"value\": \"ver agenda\", \"step\": \"final\"}, {\"intent\": \"tavily-search\", \"value\": \"noticias econ√≥micas\", \"step\": \"final\"}]\n"
            "An√°lisis: Son acciones independientes, no hay dependencia l√≥gica\n"
            "Salida: [{\"intent\": \"list_events\", \"value\": \"ver agenda\", \"step\": \"final\", \"depends_on\": \"independiente\"}, "
            "{\"intent\": \"tavily-search\", \"value\": \"noticias econ√≥micas\", \"step\": \"final\", \"depends_on\": \"independiente\"}]\n"
            
            "Usuario: 'Agenda reuni√≥n contador ma√±ana 10am' (expandido)\n"
            "Input: [{\"intent\": \"tavily-search\", \"value\": \"fecha actual Argentina hoy\", \"step\": \"intermedio\"}, "
            "{\"intent\": \"create_event\", \"value\": \"reuni√≥n contador ma√±ana 10am\", \"step\": \"final\"}]\n"
            "An√°lisis: create_event NECESITA la fecha actual para interpretar 'ma√±ana' correctamente\n"
            "Salida: [{\"intent\": \"tavily-search\", \"value\": \"fecha actual Argentina hoy\", \"step\": \"intermedio\", \"depends_on\": \"independiente\"}, "
            "{\"intent\": \"create_event\", \"value\": \"reuni√≥n contador ma√±ana 10am\", \"step\": \"final\", \"depends_on\": \"tavily-search\"}]\n"
            
            "üß© CRITERIOS DE DEPENDENCIA:\n"
            "1. ¬øEl resultado de A es NECESARIO para ejecutar B correctamente?\n"
            "2. ¬øB ser√≠a impreciso o incompleto sin A?\n"
            "3. ¬øEl contexto implica una secuencia l√≥gica obligatoria?\n"
            "4. ¬øEl usuario est√° pidiendo algo que se construye sobre informaci√≥n previa?\n"
            
            "üö® IMPORTANTE:\n"
            "- MANT√âN la cantidad exacta de intenciones recibidas\n"
            "- COPIA exactamente los campos 'intent', 'value' y 'step' sin modificarlos\n"
            "- El campo 'depends_on' DEBE estar presente en TODAS las intenciones\n"
            "- El campo 'step' DEBE preservarse exactamente como lo recibiste\n"
            "- Para independientes usa √öNICAMENTE: \"independiente\" (nunca null, \"\", none, o independente)\n"
            "- Para dependientes usa: el nombre EXACTO de la herramienta de dependencia\n"
            "- NO uses valores como null, vac√≠o, none, o variaciones de \"independiente\"\n"
            "- Analiza el SENTIDO L√ìGICO, no solo las palabras\n"
            "- Reconoce jerga argentina: 'lucas' (miles), 'palos verdes' (millones USD), 'blue' (d√≥lar paralelo)\n"
        )

        # Set the logger as an alias to intent_logger
        self.logger = self.intent_logger
    
    def receive_message(self, message: str):
        """
        Detect and split multiple intents from a single user input, including dependencies.
        4-step process: Split -> Map -> Expand (Google Sheets & Calendar) -> Dependencies
        Returns a list of intents with dependency information.
        """
        
        self.logger.info("Intent parsing pipeline initiated", 
                        user_message=message, 
                        message_length=len(message),
                        pipeline_steps=["split", "map", "expand", "dependencies"])
        
        # STEP 1: Split message into separate intents (combines counting and splitting)
        try:
            self.logger.info("Step 1 started: Analyzing and splitting user message into atomic intents", 
                           step="split_intents", 
                           input_message=message[:100] + "..." if len(message) > 100 else message)
            split_response = self.client.chat.completions.create(
                messages=[
                    {"role": "system", "content": self.split_intents_prompt},
                    {"role": "user", "content": message},
                ],
                max_tokens=128,
                temperature=0.0,
                top_p=1.0,
                model=self.deployment
            )
            split_intents = json.loads(split_response.choices[0].message.content)
            if not isinstance(split_intents, list):
                raise ValueError("Split response is not a list")
            
            num_intents = len(split_intents)
            self.logger.info("Step 1 completed: Message successfully split into atomic intents", 
                           step="split_intents",
                           step_status="success",
                           original_message=message,
                           split_intents=split_intents, 
                           num_intents_detected=num_intents,
                           llm_tokens_used=128,
                           next_step="mapping_to_tools")
            
        except Exception as e:
            self.logger.log_parse_error(
                user_input=message,
                error_message=f"Error en divisi√≥n: {str(e)}",
                error_type=type(e).__name__
            )
            split_intents = [message]
            num_intents = 1
            self.logger.warning("Step 1 failed: Falling back to treating entire message as single intent", 
                              step="split_intents",
                              step_status="failed_with_fallback",
                              error_type=type(e).__name__,
                              error_details=str(e),
                              fallback_strategy="single_intent",
                              fallback_intents=split_intents, 
                              recovery_action="proceeding_with_mapping")

        # STEP 2: Map each split intent to specific tools using system prompt
        try:
            self.logger.info("Step 2 started: Mapping each intent to specific MCP tools and capabilities", 
                           step="map_intents",
                           intents_to_map=split_intents,
                           num_intents_to_process=len(split_intents),
                           available_tool_categories=["google_sheets", "google_calendar", "tavily_search", "calculator", "rag", "memory", "general"])
            mapped_intents = []
            
            for i, intent_text in enumerate(split_intents):
                mapping_response = self.client.chat.completions.create(
                    messages=[
                        {"role": "system", "content": self.system_prompt},
                        {"role": "user", "content": intent_text},
                    ],
                    max_tokens=64,
                    temperature=0.0,
                    top_p=1.0,
                    model=self.deployment
                )
                
                try:
                    mapped_intent = json.loads(mapping_response.choices[0].message.content)
                    if isinstance(mapped_intent, dict) and "intent" in mapped_intent and "value" in mapped_intent:
                        mapped_intents.append(mapped_intent)
                    else:
                        raise ValueError("Invalid mapping format")
                except json.JSONDecodeError:
                    # Fallback if response is not JSON
                    mapped_intents.append({"intent": "general_query", "value": intent_text})
            
            self.logger.info("Step 2 completed: All intents successfully mapped to specific tools", 
                           step="map_intents",
                           step_status="success",
                           mapped_intents=mapped_intents, 
                           num_original_intents=len(split_intents),
                           num_mapped_intents=len(mapped_intents),
                           mapping_success_rate="100%",
                           next_step="expansion_for_multi_step_flows")
            
        except Exception as e:
            self.logger.log_parse_error(
                user_input=message,
                error_message=f"Error en mapeo: {str(e)}",
                error_type=type(e).__name__
            )
            mapped_intents = [{"intent": "general_query", "value": message}]
            self.logger.warning("Step 2 failed: Falling back to general query for entire message", 
                              step="map_intents",
                              step_status="failed_with_fallback",
                              error_type=type(e).__name__,
                              error_details=str(e),
                              fallback_strategy="general_query",
                              fallback_intents=mapped_intents,
                              recovery_action="proceeding_with_expansion")

        # STEP 2.5: Expand Google Sheets and Calendar intents into multi-step sequences
        try:
            self.logger.info("Step 2.5 started: Expanding multi-step workflows for Google Sheets and Calendar operations", 
                           step="expand_intents",
                           intents_before_expansion=mapped_intents,
                           num_intents_to_analyze=len(mapped_intents),
                           expansion_rules={"google_sheets": "list_spreadsheets ‚Üí list_sheets ‚Üí get_sheet_data ‚Üí action", 
                                          "google_calendar": "tavily-search(current_date) ‚Üí action"},
                           supports_expansion=["add_rows", "update_cells", "batch_update_cells", "create_event", "update_event"])
            
            expansion_response = self.client.chat.completions.create(
                messages=[
                    {"role": "system", "content": self.expansion_prompt},
                    {"role": "user", "content": json.dumps(mapped_intents, ensure_ascii=False)},
                ],
                max_tokens=512,
                temperature=0.0,
                top_p=1.0,
                model=self.deployment
            )
            
            expanded_intents = json.loads(expansion_response.choices[0].message.content)
            if not isinstance(expanded_intents, list) or not all(isinstance(x, dict) for x in expanded_intents):
                raise ValueError("Invalid expansion format")
            
            # Ensure all expanded intents have the "step" field
            for intent in expanded_intents:
                if "step" not in intent:
                    # Default to "final" if step field is missing
                    intent["step"] = "final"
                    self.logger.warning("Added missing step field", 
                                      intent_name=intent.get("intent", "unknown"),
                                      assigned_step="final")
                
            expansion_ratio = len(expanded_intents) / len(mapped_intents) if mapped_intents else 1
            self.logger.info("Step 2.5 completed: Multi-step workflows successfully expanded for complex operations", 
                           step="expand_intents",
                           step_status="success",
                           intents_before_expansion=mapped_intents,
                           expanded_intents=expanded_intents, 
                           num_before_expansion=len(mapped_intents),
                           num_after_expansion=len(expanded_intents),
                           expansion_ratio=f"{expansion_ratio:.2f}x",
                           expansion_added=len(expanded_intents) - len(mapped_intents),
                           next_step="dependency_analysis")
            
        except Exception as e:
            self.logger.log_parse_error(
                user_input=message,
                error_message=f"Error en expansi√≥n: {str(e)}",
                error_type=type(e).__name__
            )
            # Use mapped intents without expansion as fallback
            expanded_intents = mapped_intents
            # Ensure all fallback intents have the "step" field
            for intent in expanded_intents:
                if "step" not in intent:
                    intent["step"] = "final"  # Non-expanded intents are always final
            
            self.logger.warning("Step 2.5 failed: Proceeding without multi-step expansion", 
                              step="expand_intents",
                              step_status="failed_with_fallback",
                              error_type=type(e).__name__,
                              error_details=str(e),
                              fallback_strategy="no_expansion",
                              fallback_intents=expanded_intents,
                              impact="workflows_may_be_incomplete",
                              recovery_action="proceeding_with_dependency_analysis")

        # STEP 3: Detect dependencies between expanded intents
        try:
            self.logger.info("Step 3 started: Analyzing logical dependencies and execution order between intents", 
                           step="analyze_dependencies",
                           intents_to_analyze=expanded_intents,
                           num_intents_for_dependency_analysis=len(expanded_intents),
                           dependency_types=["sequential_google_sheets", "sequential_google_calendar", "data_dependent", "independent"],
                           analysis_scope="logical_flow_optimization")
            
            # Create a combined message with all expanded intents for dependency analysis
            dependency_input = {
                "original_message": message,
                "mapped_intents": expanded_intents
            }
            
            dependency_response = self.client.chat.completions.create(
                messages=[
                    {"role": "system", "content": self.dependency_prompt},
                    {"role": "user", "content": json.dumps(dependency_input, ensure_ascii=False)},
                ],
                max_tokens=512,
                temperature=0.0,
                top_p=1.0,
                model=self.deployment
            )
            
            final_intents = json.loads(dependency_response.choices[0].message.content)
            if not isinstance(final_intents, list) or not all(isinstance(x, dict) for x in final_intents):
                raise ValueError("Invalid dependency format")
            
            # CRITICAL: Ensure depends_on field is always present and valid
            for intent in final_intents:
                if "depends_on" not in intent or intent["depends_on"] is None or intent["depends_on"] == "":
                    intent["depends_on"] = "independiente"
                    self.logger.warning("Fixed missing or null depends_on field", 
                                      intent_name=intent.get("intent", "unknown"),
                                      corrected_to="independiente")
                
                # Ensure step field is preserved from expansion
                if "step" not in intent:
                    intent["step"] = "final"  # Default to final if missing
                    self.logger.warning("Added missing step field in dependency analysis", 
                                      intent_name=intent.get("intent", "unknown"),
                                      assigned_step="final")
                
            # Analyze dependency structure for logging
            independent_count = sum(1 for intent in final_intents if intent.get("depends_on") == "independiente")
            dependent_count = len(final_intents) - independent_count
            
            self.logger.info("Step 3 completed: Dependency analysis finished, execution order determined", 
                           step="analyze_dependencies",
                           step_status="success",
                           final_intents=final_intents, 
                           num_total_intents=len(final_intents),
                           num_independent_intents=independent_count,
                           num_dependent_intents=dependent_count,
                           dependency_preservation="exact_count_maintained",
                           execution_optimization="ready_for_sequential_processing")
            
            self.logger.log_multiple_intents(
                user_input=message,
                intents_count=len(final_intents),
                intents=final_intents
            )
            
        except Exception as e:
            self.logger.log_parse_error(
                user_input=message,
                error_message=f"Error en dependencias: {str(e)}",
                error_type=type(e).__name__
            )
            # Use expanded intents without dependencies as fallback
            final_intents = expanded_intents
            # CRITICAL: Ensure all fallback intents have proper depends_on field
            for intent in final_intents:
                if "depends_on" not in intent:
                    intent["depends_on"] = "independiente"
                # Ensure step field is preserved from expansion
                if "step" not in intent:
                    intent["step"] = "final"  # Default to final if missing
            
            self.logger.warning("Step 3 failed: Proceeding without dependency information", 
                              step="analyze_dependencies",
                              step_status="failed_with_fallback",
                              error_type=type(e).__name__,
                              error_details=str(e),
                              fallback_strategy="no_dependencies",
                              fallback_intents=final_intents,
                              impact="execution_order_not_optimized",
                              recovery_action="completing_pipeline_with_basic_intents")
        
        # Calculate pipeline metrics for final summary
        pipeline_success = all([
            len(split_intents) > 0,
            len(mapped_intents) > 0, 
            len(expanded_intents) > 0,
            len(final_intents) > 0
        ])
        
        self.logger.info("Intent parsing pipeline completed successfully", 
                        pipeline_status="completed",
                        pipeline_success=pipeline_success,
                        original_message=message,
                        final_intents=final_intents, 
                        total_final_intents=len(final_intents),
                        pipeline_metrics={
                            "input_message_length": len(message),
                            "split_intents_count": len(split_intents),
                            "mapped_intents_count": len(mapped_intents), 
                            "expanded_intents_count": len(expanded_intents),
                            "final_intents_count": len(final_intents),
                            "expansion_factor": len(expanded_intents) / len(mapped_intents) if mapped_intents else 1
                        },
                        ready_for_execution=True)
        return [IntentResponse(**intent) for intent in final_intents]

# # --- MAIN ---
# if __name__ == "__main__":
#     examples = [
#         # Ejemplo 1: Listar archivos (debe ser FINAL: list_spreadsheets)
#         "Qu√© archivos tengo disponibles?",
        
#         # Ejemplo 2: Listar hojas (debe ser: list_spreadsheets intermedio + list_sheets FINAL)
#         "Mostr√° las hojas de mi archivo financiero",
        
#         # Ejemplo 3: Ver datos (debe ser: navegaci√≥n + get_sheet_data FINAL)
#         "Mostr√° mi presupuesto del mes",
        
#         # Ejemplo 4: Registro de gasto (debe expandir Google Sheets completo)
#         "Anota que gast√© 150 lucas en supermercado ayer",
        
#         # Ejemplo 5: Consulta econ√≥mica con c√°lculo dependiente
#         "Cu√°nto est√° el blue hoy y calcula cu√°nto son 300 mil pesos en d√≥lares",
        
#         # Ejemplo 6: Agendar evento (debe expandir Google Calendar)
#         "Agenda reuni√≥n con contador ma√±ana 3pm para revisar mis inversiones"
#     ]
    
#     parser = IntentParser()
#     print("üß™ Probando Intent Parser con l√≥gica contextual mejorada\n")
    
#     for i, example in enumerate(examples, 1):
#         print(f"\n{'='*60}")
#         print(f"üìã EJEMPLO {i}: {example}")
#         print('='*60)
        
#         try:
#             intents = parser.receive_message(example)
#             print(f"\n‚úÖ RESULTADO FINAL ({len(intents)} intenciones):")
            
#             # Separate intermediate and final steps for better visualization
#             intermediate_steps = []
#             final_steps = []
            
#             for j, intent in enumerate(intents, 1):
#                 step_emoji = "üîß" if intent.step == "intermedio" else "üéØ"
#                 step_description = f"{step_emoji} [{intent.step.upper()}]"
                
#                 print(f"   {j}. {intent.intent} ‚Üí '{intent.value}'")
#                 print(f"      ‚îî‚îÄ {step_description} | depends_on: {intent.depends_on}")
                
#                 if intent.step == "intermedio":
#                     intermediate_steps.append(intent.intent)
#                 else:
#                     final_steps.append(intent.intent)
            
#             # Summary
#             print(f"\nüìä RESUMEN:")
#             print(f"   ‚Ä¢ Pasos intermedios: {len(intermediate_steps)} ({', '.join(intermediate_steps) if intermediate_steps else 'ninguno'})")
#             print(f"   ‚Ä¢ Pasos finales: {len(final_steps)} ({', '.join(final_steps)})")
#             print(f"   ‚Ä¢ El agente responder√° solo a: {', '.join(final_steps)}")
            
#         except Exception as e:
#             print(f"‚ùå Error procesando ejemplo {i}: {e}")
    
#     print(f"\nüèÅ Pruebas completadas!")
#     print(f"\nüîß = Paso intermedio (ejecutar silenciosamente)")
#     print(f"üéØ = Paso final (generar respuesta al usuario)")