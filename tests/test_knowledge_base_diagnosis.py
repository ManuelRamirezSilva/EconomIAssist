#!/usr/bin/env python3
"""
Prueba espec√≠fica para diagnosticar la comunicaci√≥n con knowledge_base server
"""

import asyncio
import json
import sys
import os

# Agregar src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

async def test_knowledge_base_direct():
    """Prueba comunicaci√≥n directa con el knowledge_base server"""
    print("üß™ Probando comunicaci√≥n directa con knowledge_base server...")
    
    try:
        # M√©todo 1: Usar docker exec con stdin directo
        print("\nüìù M√©todo 1: docker exec con stdin directo")
        process = await asyncio.create_subprocess_exec(
            "docker", "exec", "-i", "economyassist-kb", "sh",
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        # Enviar mensaje de inicializaci√≥n MCP
        init_message = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {"tools": {}, "resources": {}},
                "clientInfo": {"name": "EconomIAssist", "version": "1.0.0"}
            }
        }
        
        message_str = json.dumps(init_message) + "\n"
        print(f"   Enviando: {message_str.strip()}")
        
        process.stdin.write(message_str.encode())
        await process.stdin.drain()
        
        # Intentar leer respuesta
        try:
            line = await asyncio.wait_for(process.stdout.readline(), timeout=5)
            if line:
                response = line.decode().strip()
                print(f"   Respuesta: {response}")
                
                try:
                    parsed = json.loads(response)
                    print(f"   ‚úÖ JSON v√°lido: {parsed}")
                except json.JSONDecodeError:
                    print(f"   ‚ùå No es JSON v√°lido")
            else:
                print("   ‚ùå No hay respuesta")
        except asyncio.TimeoutError:
            print("   ‚ùå Timeout esperando respuesta")
        
        process.terminate()
        await process.wait()
        
    except Exception as e:
        print(f"‚ùå Error en m√©todo 1: {e}")
    
    try:
        # M√©todo 2: Comunicaci√≥n directa con el proceso principal del contenedor
        print("\nüìù M√©todo 2: Comunicaci√≥n directa con proceso principal")
        
        # Intentar conectar directamente al proceso principal del contenedor
        process = await asyncio.create_subprocess_exec(
            "docker", "exec", "-i", "economyassist-kb", "cat",
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        # Enviar mensaje MCP
        init_message = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {"tools": {}, "resources": {}},
                "clientInfo": {"name": "EconomIAssist", "version": "1.0.0"}
            }
        }
        
        message_str = json.dumps(init_message) + "\n"
        print(f"   Enviando: {message_str.strip()}")
        
        process.stdin.write(message_str.encode())
        await process.stdin.drain()
        
        # Intentar leer respuesta
        try:
            line = await asyncio.wait_for(process.stdout.readline(), timeout=5)
            if line:
                response = line.decode().strip()
                print(f"   Respuesta: {response}")
                
                try:
                    parsed = json.loads(response)
                    print(f"   ‚úÖ JSON v√°lido: {parsed}")
                except json.JSONDecodeError:
                    print(f"   ‚ùå No es JSON v√°lido")
            else:
                print("   ‚ùå No hay respuesta")
        except asyncio.TimeoutError:
            print("   ‚ùå Timeout esperando respuesta")
        
        process.terminate()
        await process.wait()
        
    except Exception as e:
        print(f"‚ùå Error en m√©todo 2: {e}")

async def test_knowledge_base_container_inspection():
    """Inspecciona el contenedor para entender mejor su configuraci√≥n"""
    print("\nüîç Inspeccionando contenedor knowledge_base...")
    
    try:
        # Obtener informaci√≥n del contenedor
        process = await asyncio.create_subprocess_exec(
            "docker", "inspect", "economyassist-kb",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0:
            import json
            container_info = json.loads(stdout.decode())[0]
            
            print(f"   üì¶ Imagen: {container_info.get('Config', {}).get('Image', 'N/A')}")
            print(f"   üöÄ Comando: {container_info.get('Config', {}).get('Cmd', 'N/A')}")
            print(f"   üìç Punto de entrada: {container_info.get('Config', {}).get('Entrypoint', 'N/A')}")
            print(f"   üåê Puertos: {container_info.get('Config', {}).get('ExposedPorts', {})}")
            print(f"   üìÇ Directorio de trabajo: {container_info.get('Config', {}).get('WorkingDir', 'N/A')}")
            
            # Ver procesos ejecut√°ndose en el contenedor
            print("\n   üîÑ Procesos en ejecuci√≥n:")
            proc_process = await asyncio.create_subprocess_exec(
                "docker", "exec", "economyassist-kb", "ps", "aux",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            proc_stdout, _ = await proc_process.communicate()
            print(proc_stdout.decode())
            
        else:
            print(f"   ‚ùå Error inspeccionando contenedor: {stderr.decode()}")
            
    except Exception as e:
        print(f"‚ùå Error inspeccionando contenedor: {e}")

async def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üîß EconomIAssist - Diagn√≥stico Knowledge Base Server")
    print("=" * 60)
    
    await test_knowledge_base_container_inspection()
    await test_knowledge_base_direct()
    
    print("\nüí° Diagn√≥stico completado")

if __name__ == "__main__":
    asyncio.run(main())